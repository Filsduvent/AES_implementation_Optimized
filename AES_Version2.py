
import base64
import numpy as np
s_box = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]

inv_s_box = [
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
    [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
    [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
    [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
    [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
    [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
    [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
    [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
    [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
    [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
    [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
    [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
    [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
    [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
]
def check_key(key):
    if len(key) != 16:
        print('Insufficient Key')
        return None
    else:
        return key
def convert(key):
    return np.array([ord(x) for x in key]).reshape(4, 4)
def sub_word(word):
    return np.array([s_box[b >> 4][b & 15] for b in word])
def ext_round(r):
    round_constants = [
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
    ]
    return np.array([round_constants[r], 0, 0, 0])
def g_function(r, word3):
    word3 = np.roll(word3, -1)
    word3 = sub_word(word3)
    r_const = ext_round(r)
    return word3 ^ r_const
def lookup(byte):
    x = byte >> 4
    y = byte & 15
    return s_box[x][y]
def inv_lookup(byte):
    x = byte >> 4
    y = byte & 15
    return inv_s_box[x][y]
def subBytes(block):
    sublock = []
    for i in range(4):
        byte = []
        for j in range(4):
            byte.append(lookup(int(block[i][j])))
        sublock.append(byte)
    return sublock
def inv_subBytes(block):
    sublock = []
    for i in range(4):
        byte = []
        for j in range(4):
            byte.append(inv_lookup(int(block[i][j])))
        sublock.append(byte)
    return sublock
def shiftRows(block):
    sublock = []
    for i in range(4):
        sublock.append(block[i][i:] + block[i][:i])
    return sublock
def inv_shiftRows(block):
    sublock = []
    for i in range(4):
        sublock.append(list(block[i][-i:]) + list(block[i][:-i]))
    return sublock
c = [
    [2,3,1,1],
    [1,2,3,1],
    [1,1,2,3],
    [3,1,1,2]
]
def matmul(byte, n):
    if (n==1):
        return int(byte)
    elif (n==2):
        s = int(byte) << 1 & 0xff 
        # & 0xff to basically remove extra bits, '0x1f1' -> '0xf1'
        if (int(byte) & 128) != 0 :
            s = s ^ 0x1b
        return s
    elif (n==3):
        s = int(byte) << 1 & 0xff
        if (int(byte) & 128) != 0 :
            s = s ^ 0x1b
        s = s ^ int(byte)
        return s
def mixColumns(block):
    mixblock = [[],[],[],[]]
    for col in range(4):
        for row in range(4):
            val = 0
            for i in range(4):
                val = val ^ matmul(block[i][col], c[row][i])
            mixblock[row].append(val)
    return mixblock
def inv_mixColumns(block):
    mixblock = mixColumns(block)
    mixblock = mixColumns(mixblock)
    mixblock = mixColumns(mixblock)
    return mixblock
'''
Takes string data as input. Gives out blocks of hexadecimal each of 16 bytes
Eg: 'gojo'
'''
def str_to_blk(s, encoding=1):
    try:
        s = s.encode('latin-1')
    except:
        pass
    # Padding done only for encryption
    if (encoding==1):
        pad = bytes(16 - len(s) % 16)
        if len(pad) != 16:
            s += pad
    block = []
    for i in range(len(s) // 16):
        bl = s[i*16:i*16 + 16]
        grid = [[],[],[],[]]
        for i in range(4):
            for j in range(4):
                grid[i].append(int(bl[i + j*4]))
        block.append(np.array(grid))
    return block
'''
Takes blocks as input and output is string
Eg: b'asdsd'
'''
def blk_to_str(blocks):
    int_stream = []
    for block in blocks:
        for column in range(4):
                for row in range(4):
                    int_stream.append(block[row][column])
    return bytes(int_stream).replace(b'\x00', b'')
def encryption(s, key):
    blocks = str_to_blk(s)
    key = convert(check_key(key))
    new_key = key.copy()
    keys = [np.array(new_key.copy()).T]

    for i in range(10):
        new_box = []
        g = g_function(i, new_key[3])
        new_box.append(new_key[0] ^ g)
        for j in range(1, 4):
            new_box.append(new_box[j - 1] ^ new_key[j])
        new_key = np.array(new_box)
        keys.append(new_key.T)

    # Generated keys for encryption are stored in keys
    temp_blocks = []

    #Initial round key addition
    for block in blocks:
        temp_blocks.append(block^keys[0])
    blocks = temp_blocks

    #Main rounds
    for round in range(1,10):
            temp_blocks = []

            for block in blocks:
                block = subBytes(block)
                block = shiftRows(block)
                block = mixColumns(block)
                temp_blocks.append(block^keys[round])

            blocks = temp_blocks

    temp_blocks = []

    # Final round without mixColumns
    for block in blocks:
        block = subBytes(block)
        block = shiftRows(block)
        temp_blocks.append(block^keys[10])
    blocks = temp_blocks
    return blk_to_str(blocks)
        
def decryption(s, key):
    blocks = str_to_blk(s, 0)
    key = convert(check_key(key))
    new_key = key.copy()
    keys = [np.array(new_key.copy()).T]

    for i in range(10):
        new_box = []
        g = g_function(i, new_key[3])
        new_box.append(new_key[0] ^ g)
        for j in range(1, 4):
            new_box.append(new_box[j - 1] ^ new_key[j])
        new_key = np.array(new_box)
        keys.append(new_key.T)

    # Generated keys for decryption are stored in keys

    # Initial round key addition without mixColumns
    temp_blocks = []
    for block in blocks:
        block = block^keys[10]
        block = inv_shiftRows(block)
        block = inv_subBytes(block)
        temp_blocks.append(block)
    
    blocks = temp_blocks

    # Remaining rounds
    for round in range(9,0,-1):
        temp_blocks = []

        for block in blocks:
            block = block^keys[round]
            block = inv_mixColumns(block)
            block = inv_shiftRows(block)
            block = inv_subBytes(block)
            temp_blocks.append(block)

        blocks = temp_blocks
    
    temp_blocks = []

    # Final round key addition
    for block in blocks:
        block = block^keys[0]
        temp_blocks.append(block)
    
    blocks = temp_blocks
    return blk_to_str(blocks)
data = 'Gojo Satoru is the GOAT'
key = 'asdfghjklqwertyu'
encrypted_data = encryption(data, key)
print(encrypted_data)

decrypted_data = decryption(encrypted_data, key)
print(decrypted_data)
